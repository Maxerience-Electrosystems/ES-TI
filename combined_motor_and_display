#define DATA       (*((volatile unsigned long *)0x400043FC)) // bits 7-0
#define GPIO_PORTA_DIR_R        (*((volatile unsigned long *)0x40004400))
#define GPIO_PORTA_AFSEL_R      (*((volatile unsigned long *)0x40004420))
#define GPIO_PORTA_DEN_R        (*((volatile unsigned long *)0x4000451C))
#define GPIO_PORTA_AMSEL_R      (*((volatile unsigned long *)0x40004528))
#define GPIO_PORTA_DR8R_R       (*((volatile unsigned long *)0x40004508))
#define GPIO_PORTA_PCTL_R       (*((volatile unsigned long *)0x4000452C))
	
#define PF4       (*((volatile unsigned long *)0x40025040))


#define SYSCTL_RCGC2_R          (*((volatile unsigned long *)0x400FE108))

void PortA_Init(void){ volatile unsigned long delay;
  SYSCTL_RCGC2_R |= 0x01;          // 1) activate Port B
  delay = SYSCTL_RCGC2_R;          // allow time for clock to stabilize
                                   // 2) no need to unlock PB7-0
  GPIO_PORTA_AMSEL_R &= ~0xFF;     // 3) disable analog functionality on PB7-0
  GPIO_PORTA_PCTL_R = 0x00000000;  // 4) configure PB7-0 as GPIO
  GPIO_PORTA_DIR_R |= 0xFF;        // 5) make PB7-0 out
  GPIO_PORTA_AFSEL_R &= ~0xFF;     // 6) disable alt funct on PB7-0
  GPIO_PORTA_DR8R_R |= 0xFF;       // enable 8 mA drive on PB7-0
  GPIO_PORTA_DEN_R |= 0xFF;        // 7) enable digital I/O on PB7-0
}
#define GPIO_PORTF_DATA_R       (*((volatile unsigned long *)0x400253FC))
#define GPIO_PORTF_DIR_R        (*((volatile unsigned long *)0x40025400))
#define GPIO_PORTF_AFSEL_R      (*((volatile unsigned long *)0x40025420))
#define GPIO_PORTF_PUR_R        (*((volatile unsigned long *)0x40025510))
#define GPIO_PORTF_DEN_R        (*((volatile unsigned long *)0x4002551C))
#define GPIO_PORTF_LOCK_R       (*((volatile unsigned long *)0x40025520))
#define GPIO_PORTF_CR_R         (*((volatile unsigned long *)0x40025524))
#define GPIO_PORTF_AMSEL_R      (*((volatile unsigned long *)0x40025528))
#define GPIO_PORTF_PCTL_R       (*((volatile unsigned long *)0x4002552C))
//#define SYSCTL_RCGC2_R          (*((volatile unsigned long *)0x400FE108))

void PortF_Init(void){ volatile unsigned long delay;
  SYSCTL_RCGC2_R |= 0x00000020;     // 1) F clock
  delay = SYSCTL_RCGC2_R;           // delay   
  GPIO_PORTF_LOCK_R = 0x4C4F434B;   // 2) unlock PortF PF0  
  GPIO_PORTF_CR_R |= 0x1F;           // allow changes to PF4-0       
  GPIO_PORTF_AMSEL_R &= 0x00;        // 3) disable analog function
  GPIO_PORTF_PCTL_R &= 0x00000000;   // 4) GPIO clear bit PCTL  
  GPIO_PORTF_DIR_R &= ~0x11;          // 5.1) PF4,PF0 input, 
  GPIO_PORTF_DIR_R |= 0x08;          // 5.2) PF3 output  
  GPIO_PORTF_AFSEL_R &= 0x00;        // 6) no alternate function
  GPIO_PORTF_PUR_R |= 0x11;          // enable pullup resistors on PF4,PF0       
  GPIO_PORTF_DEN_R |= 0x1F;          // 7) enable digital pins PF4-PF0        
}

#include<string.h>
#define ldata (*((volatile unsigned long *)0x400053FC)) // bits 7-0 of port B
#define GPIO_PORTB_DIR_R (*((volatile unsigned long *)0x40005400))
#define GPIO_PORTB_AFSEL_R (*((volatile unsigned long *)0x40005420))
#define GPIO_PORTB_DEN_R (*((volatile unsigned long *)0x4000551C))
#define GPIO_PORTB_AMSEL_R (*((volatile unsigned long *)0x40005528))
#define GPIO_PORTB_DR8R_R (*((volatile unsigned long *)0x40005508))
#define GPIO_PORTB_PCTL_R (*((volatile unsigned long *)0x4000552C))

//#define lcmd               (*((volatile unsigned long *)0x400243FC)) // bits 7-0
#define GPIO_PORTE_DIR_R   (*((volatile unsigned long *)0x40024400))
#define GPIO_PORTE_AFSEL_R (*((volatile unsigned long *)0x40024420))
#define GPIO_PORTE_DEN_R (*((volatile unsigned long *)0x4002451C))
#define GPIO_PORTE_AMSEL_R (*((volatile unsigned long *)0x40024528))
#define GPIO_PORTE_PCTL_R (*((volatile unsigned long *)0x4002452C))
#define SYSCTL_RCGC2_R (*((volatile unsigned long *)0x400FE108))
	
#define E  1 // on PG2
#define RW 2 // on PG1
#define RS 4 // on PG0
//#define LCDDATA (*((volatile unsigned long *)0x400053FC))   // PORTF
#define lcmd (*((volatile unsigned long *)0x4002401C))    // PG2-PG0


void PortB_Init(void){ volatile unsigned long delay;
SYSCTL_RCGC2_R |= 0x02; // 1) activate Port B
delay = SYSCTL_RCGC2_R; // allow time for clock to stabilize
// 2) no need to unlock PB7-0
GPIO_PORTB_AMSEL_R &= ~0xFF; // 3) disable analog functionality on PB7-0
GPIO_PORTB_PCTL_R = 0x00000000; // 4) configure PB7-0 as GPIO
GPIO_PORTB_DIR_R |= 0xFF; // 5) make PB7-0 out
GPIO_PORTB_AFSEL_R &= ~0xFF; // 6) disable alt funct on PB7-0
GPIO_PORTB_DR8R_R |= 0xFF; // enable 8 mA drive on PB7-0
GPIO_PORTB_DEN_R |= 0xFF; // 7) enable digital I/O on PB7-0
}

void PortE_Init(void){ volatile unsigned long delay;
SYSCTL_RCGC2_R |= 0x10; // 1) activate Port E
delay = SYSCTL_RCGC2_R; // allow time for clock to stabilize
                                                    
GPIO_PORTE_AMSEL_R &= ~0x07; // 3) disable analog function on PE1-0
GPIO_PORTE_PCTL_R = 0x00000000;// 4) configure PE1-0 as GPIO
GPIO_PORTE_DIR_R |= 0x07; // 5) make PE2-0 OUT
GPIO_PORTE_AFSEL_R &= ~0x07; // 6) disable alt funct on PE1-0
GPIO_PORTE_DEN_R |= 0x07; // 7) enable digital I/O on PE1-0
}

	
#define sequence1 0x50
#define sequence2 0x60
#define sequence3 0xA0
#define sequence4 0x90

void delay(unsigned int);
#define busy (*((volatile unsigned long *)0x40005200))

const char string1[]={"MAXERIENCE"};
const char string2[]={"TECHNOLOGIES"};
unsigned long  rs;
unsigned long  rw;
unsigned long  en;

void lcd_cmd(unsigned char value);
void lcd_data(unsigned char value);
void lcd_ready(void);
void sendString(const char*);

void delay(unsigned int itime)
{
unsigned int i,j;
for(i=0;i<itime;i++)
for(j=0;j<250;j++);
}
// port B is for D0-D7
// PE2 is rs
// PE1 is rw
// PE0 is en
// PB7 is busy

// have to initialise port B and port E


void sendString(const char *str)
{
char i; 
	int j=strlen(str);
for(i=0;i<j;i++)
{
lcd_data(str[i]);
}
}

void lcd_cmd(unsigned char value)
{
lcd_ready();
	delay(50);
ldata=value;
	lcmd=E;
delay(50);
lcmd=0;
return;
}
void lcd_data(unsigned char value)
{
lcd_ready();
	delay(50);
ldata=value;
lcmd=RS+E;	
delay(50);
lcmd=RS;
return;
}

void lcd_ready()
{
busy=1;
rs=0;
rw=1;
while(busy==1)
{
en=0;
delay(50);
en=1;
}
return;
}



int main()
    {
				unsigned char direction;
			PortA_Init();
	PortF_Init();
				PortB_Init();
	PortE_Init();
lcd_cmd(0x38); // 8 BIT DATA , 2LINE, 5X7 DOT MATRIX
lcd_cmd(0x0E); // DISPLAY ON, CURSOR ON, NO BLINK
	
lcd_cmd(0x01); //CLEAR DISPLAY
lcd_cmd(0x80);
sendString(string1); 
	
	lcd_cmd(0x0C0);
	sendString(string2); 
	      
      		while(1)
		         {
				direction= GPIO_PORTF_DATA_R&0x10;
				
				if(direction==0x10)
				           {
						DATA=sequence1;
						delay(250);
						DATA=sequence2;
						delay(250);
						DATA=sequence3;
						delay(250);
						DATA=sequence4;
						delay(250);
										 lcd_cmd(0x18);
										 delay(250);
				            }
				else
				           {
						DATA=sequence4;
						delay(250);
						DATA=sequence3;
						delay(250);
						DATA=sequence2;
						delay(250);
						DATA=sequence1;
						delay(250);
										 lcd_cmd(0x1C);
										 delay(250);
				           }  
			   }                  
}
