/*         defining various registers of port A        */
#define DATA       (*((volatile unsigned long *)0x400043FC)) // bits 7-0
#define GPIO_PORTA_DIR_R        (*((volatile unsigned long *)0x40004400))
#define GPIO_PORTA_AFSEL_R      (*((volatile unsigned long *)0x40004420))
#define GPIO_PORTA_DEN_R        (*((volatile unsigned long *)0x4000451C))
#define GPIO_PORTA_AMSEL_R      (*((volatile unsigned long *)0x40004528))
#define GPIO_PORTA_DR8R_R       (*((volatile unsigned long *)0x40004508))
#define GPIO_PORTA_PCTL_R       (*((volatile unsigned long *)0x4000452C))
#define SYSCTL_RCGC2_R          (*((volatile unsigned long *)0x400FE108))

/*    Initializing port A     */
void PortA_Init(void){ volatile unsigned long delay;
  SYSCTL_RCGC2_R |= 0x01;          // 1) activate Port A
  delay = SYSCTL_RCGC2_R;          // allow time for clock to stabilize
                                                         // 2) no need to unlock PA7-0
  GPIO_PORTA_AMSEL_R &= ~0xFF;     // 3) disable analog functionality on PA7-0
  GPIO_PORTA_PCTL_R = 0x00000000;  // 4) configure PA7-0 as GPIO
  GPIO_PORTA_DIR_R |= 0xFF;        // 5) make PA7-0 out
  GPIO_PORTA_AFSEL_R &= ~0xFF;     // 6) disable alt funct on PA7-0
  GPIO_PORTA_DR8R_R |= 0xFF;       // enable 8 mA drive on PA7-0
  GPIO_PORTA_DEN_R |= 0xFF;        // 7) enable digital I/O on PA7-0
}
/*  Defining registers of port F   */
#define GPIO_PORTF_DATA_R       (*((volatile unsigned long *)0x400253FC))
#define GPIO_PORTF_DIR_R        (*((volatile unsigned long *)0x40025400))
#define GPIO_PORTF_AFSEL_R      (*((volatile unsigned long *)0x40025420))
#define GPIO_PORTF_PUR_R        (*((volatile unsigned long *)0x40025510))
#define GPIO_PORTF_DEN_R        (*((volatile unsigned long *)0x4002551C))
#define GPIO_PORTF_LOCK_R       (*((volatile unsigned long *)0x40025520))
#define GPIO_PORTF_CR_R         (*((volatile unsigned long *)0x40025524))
#define GPIO_PORTF_AMSEL_R      (*((volatile unsigned long *)0x40025528))
#define GPIO_PORTF_PCTL_R       (*((volatile unsigned long *)0x4002552C))
//#define SYSCTL_RCGC2_R          (*((volatile unsigned long *)0x400FE108))

/*   Initializing port F   */
void PortF_Init(void){ volatile unsigned long delay;
  SYSCTL_RCGC2_R |= 0x00000020;     // 1) F clock
  delay = SYSCTL_RCGC2_R;           // delay   
  GPIO_PORTF_LOCK_R = 0x4C4F434B;   // 2) unlock PortF PF0  
  GPIO_PORTF_CR_R |= 0x1F;           // allow changes to PF4-0       
  GPIO_PORTF_AMSEL_R &= 0x00;        // 3) disable analog function
  GPIO_PORTF_PCTL_R &= 0x00000000;   // 4) GPIO clear bit PCTL  
  GPIO_PORTF_DIR_R &= ~0x11;          // 5.1) PF4,PF0 input, 
  GPIO_PORTF_DIR_R |= 0x08;          // 5.2) PF3 output  
  GPIO_PORTF_AFSEL_R &= 0x00;        // 6) no alternate function
  GPIO_PORTF_PUR_R |= 0x11;          // enable pullup resistors on PF4,PF0       
  GPIO_PORTF_DEN_R |= 0x1F;          // 7) enable digital pins PF4-PF0        
}
// the 4 sequences that we have to assign to the motor pins to make sure they rotate 	
#define sequence1 0x50
#define sequence2 0x60
#define sequence3 0xA0
#define sequence4 0x90

void delay(unsigned int);

int main()
    {
      unsigned char direction;
      PortA_Init();      // initialize port A  
      PortF_Init();      // initialize port B
      
      while(1)
         {
          direction= GPIO_PORTF_DATA_R&0x10; // we need PF4 which will act as the switch for
                                            // direction control. When PF=0 - CLOCKWISE                                                
                                            //  When PF=1 - ANTICLOCKWISE
          if(direction==0x10)
         {
           DATA=sequence1;
          delay(25000);
          DATA=sequence2;
          delay(25000);                                         // CLOCKWISE OPERATION
         DATA=sequence3;
         delay(25000);
         DATA=sequence4;
        delay(25000);
      }
 else
 {
  DATA=sequence4;
  delay(25000);
  DATA=sequence3;
  delay(25000);
  DATA=sequence2;                                 // ANTICLOCKWISE OPERATION
  delay(25000);
  DATA=sequence1;
  delay(25000);
}  
			   }
                  }
void delay(unsigned int itime) // the delay function
{
unsigned int i,j;                           
for(i=0;i<itime;i++)
for(j=0;j<250;j++);
} 

