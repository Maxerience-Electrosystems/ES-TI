// port B is for D0-D7
// PE2 is rs
// PE1 is rw
// PE0 is en
// PB7 is busy

// have to initialise port B and port E
#include<string.h>
#define ldata (*((volatile unsigned long *)0x400053FC)) // bits 7-0 of port B
#define GPIO_PORTB_DIR_R (*((volatile unsigned long *)0x40005400))
#define GPIO_PORTB_AFSEL_R (*((volatile unsigned long *)0x40005420))
#define GPIO_PORTB_DEN_R (*((volatile unsigned long *)0x4000551C))
#define GPIO_PORTB_AMSEL_R (*((volatile unsigned long *)0x40005528))
#define GPIO_PORTB_DR8R_R (*((volatile unsigned long *)0x40005508))
#define GPIO_PORTB_PCTL_R (*((volatile unsigned long *)0x4000552C))

#define GPIO_PORTE_DIR_R   (*((volatile unsigned long *)0x40024400))
#define GPIO_PORTE_AFSEL_R (*((volatile unsigned long *)0x40024420))
#define GPIO_PORTE_DEN_R (*((volatile unsigned long *)0x4002451C))
#define GPIO_PORTE_AMSEL_R (*((volatile unsigned long *)0x40024528))
#define GPIO_PORTE_PCTL_R (*((volatile unsigned long *)0x4002452C))
#define SYSCTL_RCGC2_R (*((volatile unsigned long *)0x400FE108))
	
#define E  1 // on PG2
#define RW 2 // on PG1
#define RS 4 // on PG0
#define lcmd (*((volatile unsigned long *)0x4002401C))    // PE2-PE0


#define busy (*((volatile unsigned long *)0x40005200))

const char string1[]={"MAXERIENCE"};
const char string2[]={"TECHNOLOGIES"};

void lcd_cmd(unsigned char value);
void lcd_data(unsigned char value);
void lcd_ready(void);
void sendString(const char*);

void delay(unsigned int itime)
{
unsigned int i,j;
for(i=0;i<itime;i++)
for(j=0;j<250;j++);
}

void sendString(const char *str)
{
char i; 
int j=strlen(str);
for(i=0;i<j;i++)
{
lcd_data(str[i]);
}
}

void lcd_cmd(unsigned char value)
{
delay(50);
ldata=value;
lcmd=E;
delay(50);
lcmd=0;
return;
}
void lcd_data(unsigned char value)
{
delay(50);
ldata=value;
lcmd=RS+E;	
delay(50);
lcmd=RS;
return;
}


void PortB_Init(void){ volatile unsigned long delay;
SYSCTL_RCGC2_R |= 0x02; // 1) activate Port B
delay = SYSCTL_RCGC2_R; // allow time for clock to stabilize
// 2) no need to unlock PB7-0
GPIO_PORTB_AMSEL_R &= ~0xFF; // 3) disable analog functionality on PB7-0
GPIO_PORTB_PCTL_R = 0x00000000; // 4) configure PB7-0 as GPIO
GPIO_PORTB_DIR_R |= 0xFF; // 5) make PB7-0 out
GPIO_PORTB_AFSEL_R &= ~0xFF; // 6) disable alt funct on PB7-0
GPIO_PORTB_DR8R_R |= 0xFF; // enable 8 mA drive on PB7-0
GPIO_PORTB_DEN_R |= 0xFF; // 7) enable digital I/O on PB7-0
}

void PortE_Init(void){ volatile unsigned long delay;
SYSCTL_RCGC2_R |= 0x10; // 1) activate Port E
delay = SYSCTL_RCGC2_R; // allow time for clock to stabilize
                                                    
GPIO_PORTE_AMSEL_R &= ~0x07; // 3) disable analog function on PE1-0
GPIO_PORTE_PCTL_R = 0x00000000;// 4) configure PE1-0 as GPIO
GPIO_PORTE_DIR_R |= 0x07; // 5) make PE2-0 OUT
GPIO_PORTE_AFSEL_R &= ~0x07; // 6) disable alt funct on PE1-0
GPIO_PORTE_DEN_R |= 0x07; // 7) enable digital I/O on PE1-0
}

int main()
{
 PortB_Init();
PortE_Init();

lcd_cmd(0x38); // 8 BIT DATA , 2LINE, 5X7 DOT MATRIX
lcd_cmd(0x0E); // DISPLAY ON, CURSOR ON, NO BLINK
	
lcd_cmd(0x01); //CLEAR DISPLAY
lcd_cmd(0x80);
sendString(string1); 
	
lcd_cmd(0x0C0);
sendString(string2); 
	
}
